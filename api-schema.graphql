# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AppConfig {
  authDiscordEnabled: Boolean!
  authGithubEnabled: Boolean!
  authGoogleEnabled: Boolean!
  authPasswordEnabled: Boolean!
  authRegisterEnabled: Boolean!
  authSolanaEnabled: Boolean!
  authTelegramEnabled: Boolean!
  authTwitterEnabled: Boolean!
  solanaEndpoint: String!
  solanaFeePayer: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Identity {
  challenges: [IdentityChallenge!]
  createdAt: DateTime!
  expired: Boolean
  id: String!
  name: String
  owner: User
  profile: JSON
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime!
  url: String
  verified: Boolean
}

input IdentityAdminCreateInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input IdentityAdminFindManyInput {
  ownerId: String
  provider: IdentityProvider
}

type IdentityChallenge {
  challenge: String!
  createdAt: DateTime!
  id: String!
  ip: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String
  updatedAt: DateTime!
  userAgent: String!
  verified: Boolean!
}

enum IdentityProvider {
  Discord
  GitHub
  Google
  Solana
  Telegram
  Twitter
}

input IdentityRequestChallengeInput {
  provider: IdentityProvider!
  providerId: String!
}

input IdentityUserFindManyInput {
  username: String!
}

input IdentityUserLinkInput {
  provider: IdentityProvider!
  providerId: String!
}

input IdentityVerifyChallengeInput {
  challenge: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String!
  useLedger: Boolean = false
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  adminCreateIdentity(input: IdentityAdminCreateInput!): Identity
  adminCreateUser(input: UserAdminCreateInput!): User
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminUpdateUser(input: UserAdminUpdateInput!, userId: String!): User
  anonVerifyIdentityChallenge(input: IdentityVerifyChallengeInput!): IdentityChallenge
  checkUserProfile: JSON
  createUserProfile(publicKey: String!): [Int!]!
  login(input: LoginInput!): User
  logout: Boolean
  profileIdentityAdd(provider: IdentityProvider!, providerId: String!, publicKey: String!): [Int!]!
  profileIdentityRemove(provider: IdentityProvider!, providerId: String!, publicKey: String!): [Int!]!
  register(input: RegisterInput!): User
  solanaRequestAirdrop(account: String!): JSON
  solanaSignAndConfirmTransaction(tx: [Int!]!): String
  syncUserProfile: JSON
  userDeleteIdentity(identityId: String!): Boolean
  userLinkIdentity(input: IdentityUserLinkInput!): Identity
  userUpdateUser(input: UserUserUpdateInput!): User
  userVerifyIdentityChallenge(input: IdentityVerifyChallengeInput!): IdentityChallenge
}

type PagingMeta {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Int
  pageCount: Int
  previousPage: Int
  totalCount: Int
}

type PubkeyProfile {
  authorities: [String!]!
  avatarUrl: String!
  bump: Int!
  feePayer: String!
  identities: [PubkeyProfileIdentity!]!
  publicKey: String!
  username: String!
}

type PubkeyProfileIdentity {
  name: String!
  provider: String!
  providerId: String!
}

type Query {
  adminFindManyIdentity(input: IdentityAdminFindManyInput!): [Identity!]
  adminFindManyUser(input: UserAdminFindManyInput!): UserPaging!
  adminFindOneUser(userId: String!): User
  anonRequestIdentityChallenge(input: IdentityRequestChallengeInput!): IdentityChallenge
  appConfig: AppConfig!
  getUserProfile: PubkeyProfile
  getUserProfileByProvider(provider: IdentityProvider!, providerId: String!): PubkeyProfile
  getUserProfileByUsername(username: String!): PubkeyProfile
  getUserProfiles: JSON!
  me: User
  solanaGetBalance(account: String!): String
  solanaGetTokenAccounts(account: String!): JSON
  solanaGetTransactions(account: String!): JSON
  uptime: Float!
  userFindManyIdentity(input: IdentityUserFindManyInput!): [Identity!]
  userFindManyUser(input: UserUserFindManyInput!): UserPaging!
  userFindOneUser(username: String!): User
  userRequestIdentityChallenge(input: IdentityRequestChallengeInput!): IdentityChallenge
}

input RegisterInput {
  password: String!
  username: String!
}

type User {
  avatarUrl: String
  createdAt: DateTime
  developer: Boolean
  id: String!
  identities: [Identity!]
  name: String
  profile: String
  profileUrl: String!
  role: UserRole
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserAdminCreateInput {
  password: String
  username: String!
}

input UserAdminFindManyInput {
  limit: Int = 10
  page: Int = 1
  role: UserRole
  search: String
  status: UserStatus
}

input UserAdminUpdateInput {
  avatarUrl: String
  developer: Boolean
  name: String
  role: UserRole
  status: UserStatus
  username: String
}

type UserPaging {
  data: [User!]!
  meta: PagingMeta!
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUserFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserUserUpdateInput {
  avatarUrl: String
  developer: Boolean
  name: String
}
